[manifest]
version = "1.0.0"
dump_lua = true
priority = -1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = " elseif config.name == 'hands' then"
position = "before"
payload = '''
elseif config.name == 'hands' and G.GAME.RootKit then
table.insert(left_text, {n=G.UIT.T, config={text = config.disp or config.dollars, scale = 0.8*scale, colour = G.C.RED, shadow = true, juice = true}})
table.insert(left_text, {n=G.UIT.O, config={object = DynaText({string = {" "..localize{type = 'variable', key = 'remaining_hand_money', vars = {(G.GAME.modifiers.money_per_hand or 1)*G.GAME.RootKit}}}, colours = {G.C.UI.TEXT_LIGHT}, shadow = true, pop_in = 0, scale = 0.4*scale, silent = true})}})
G.GAME.RootKit = nil
'''
match_indent = true

# Payload - cash out
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if G.GAME.current_round.hands_left > 0 and not G.GAME.modifiers.no_extra_hand_money then"
position = "at"
payload = '''
if G.GAME.current_round.hands_left > 0 and not G.GAME.modifiers.no_extra_hand_money and G.GAME.RootKit then
        add_round_eval_row({dollars = G.GAME.current_round.hands_left*(G.GAME.modifiers.money_per_hand or 1)*(G.GAME.RootKit or 1), disp = G.GAME.current_round.hands_left, bonus = true, name='hands', pitch = pitch})
        pitch = pitch + 0.06
        dollars = dollars + G.GAME.current_round.hands_left*(G.GAME.modifiers.money_per_hand or 1)*(G.GAME.RootKit or 1)
elseif G.GAME.current_round.hands_left > 0 and not G.GAME.modifiers.no_extra_hand_money then
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "add_round_eval_row({name = 'bottom', dollars = dollars})"
position = "before"
payload = '''
dollars = dollars * (G.GAME.InterferencePayoutMod or 1)
G.GAME.InterferencePayoutMod = nil
if G.GAME.RedBlindStates then
        for i, v in pairs(G.GAME.RedBlindStates) do G.GAME.round_resets.blind_states[i] = v end
        G.GAME.RedBlindStates = nil
end
if G.GAME.round_resets.blind_states.Boss == "Defeated" then
        G.GAME.round_resets.blind_choices.Small = "bl_small"
        G.GAME.round_resets.blind_choices.Big = "bl_big"
end
'''
match_indent = true


[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''        G.blind_prompt_box:get_UIE_by_ID('prompt_dynatext1').config.object.pop_delay = 0
        G.blind_prompt_box:get_UIE_by_ID('prompt_dynatext1').config.object:pop_out(5)
        G.blind_prompt_box:get_UIE_by_ID('prompt_dynatext2').config.object.pop_delay = 0
        G.blind_prompt_box:get_UIE_by_ID('prompt_dynatext2').config.object:pop_out(5) 
        '''
position = "at"
payload = '''
if G.blind_prompt_box and G.blind_prompt_box:get_UIE_by_ID('prompt_dynatext1') then
        G.blind_prompt_box:get_UIE_by_ID('prompt_dynatext1').config.object.pop_delay = 0
        G.blind_prompt_box:get_UIE_by_ID('prompt_dynatext1').config.object:pop_out(5)
        G.blind_prompt_box:get_UIE_by_ID('prompt_dynatext2').config.object.pop_delay = 0
        G.blind_prompt_box:get_UIE_by_ID('prompt_dynatext2').config.object:pop_out(5) 
end
'''
match_indent = true