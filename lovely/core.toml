[manifest]
version = "1.0.0"
dump_lua = true
priority = -1

[[patches]]
[patches.pattern]
target = "main.lua"
pattern = '''function love.load()'''
position = "before"
payload = '''
Entropy = {}
Entropy.FlipsideInversions = {}
Entropy.EnhancementFuncs = {}
Entropy.RarityChecks = {
    [0]="cry_candy",
    1,
    2,
    3,
    "cry_epic",
    4,
    "cry_exotic",
    "entr_entropic"
}
Entropy.BoosterSets = {
    ["Spectral"] = "p_spectral_mega_1",
    ["Tarot"] = "p_arcana_mega_1",
    ["Planet"] = "p_celestial_mega_1",
    ["Spectral"] = "p_spectral_mega_1",
    ["Code"] = "p_cry_code_mega_1",
    ["RCode"] = "p_entr_twisted_pack_mega",
    ["RPlanet"] = "p_entr_twisted_pack_mega",
    ["RSpectral"] = "p_entr_twisted_pack_mega",
}
Entropy.DefineBlacklist = {
    c_black_hole = true,
    c_soul = true,
    c_cry_gateway = true,
    c_cry_white_hole = true,
    c_cry_pointer = true,
    c_entr_fervour = true,
    c_entr_define = true,
    Back = true,
    Sleeve = true,
    Edition = true
}

Entropy.ChaosBlacklist = {}
Entropy.ParakmiBlacklist = {}
Entropy.ChaosConversions = {}
Entropy.AscendedTags = {}
Entropy.BlindTokenBlacklist = {}
Entropy.References = {}
Entropy.Zeniths = {}
Entropy.RarityPoints = {
    [1] = 1, --common
    [2] = 4, --uncommon
    [3] = 12, --rare
    ["cry_epic"] = 60,
    [4] = 300, --legendary
    ["cry_exotic"] = 1000,
    ["entr_hyper_exotic"] = 5000,
}
--higher rarities give less points so the diminisher is used in division
Entropy.RarityDiminishers = {
    [1] = 1,
    [2] = 1.5,
    [3] = 2.5,
    [4] = 5,
    ["cry_epic"] = 4,
    ["cry_exotic"] = 10,
    ["entr_hyper_exotic"] = 15
}
Entropy.EditionFactors = {
    ["e_foil"] = 1.25,
    ["e_holo"] = 1.45,
    ["e_polychrome"] = 2,
    ["e_negative"] = 2.1,
    ["e_cry_glitched"] = 1.4,
    ["e_cry_mosaic"] = 2.2,
    ["e_cry_oversaturated"] = 1.5,
    ["e_cry_fragile"] = 1.8,
    ["e_cry_gold"] = 1.7,
    ["e_cry_blurred"] = 1.5,
    ["e_cry_noisy"] = 1.7,
    ["e_cry_astral"] = 2.2,
    ["e_cry_m"] = 1.45
}
'''
match_indent = true


[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''(self.ability.set == 'Voucher' and {G.C.SECONDARY_SET.Voucher, G.C.CLEAR}) or'''
position = "at"
payload = '''
(self.ability.set == 'Voucher' and {G.C.SECONDARY_SET.Voucher, G.C.CLEAR}) or (G.C.Entropy.Dissolve[self.ability.set] and {G.C.Entropy.Dissolve[self.ability.set]}) or
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card_character.lua"
pattern = 'self.children.card:set_ability(G.P_CENTERS.j_jolly)'
position = "after"
payload = "self.children.card:set_ability(G.P_CENTERS.j_entr_surreal_joker)"
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = 'Cryptid.profile_prefix = "M"'
position = "after"
payload = 'Cryptid.profile_prefix = Cryptid.profile_prefix == "M" and "E" or Cryptid.profile_prefix.."E"'
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = 'Cryptid.profile_prefix = Jen and "J" or "M"'
position = "after"
payload = 'Cryptid.profile_prefix = Cryptid.profile_prefix == "M" and "E" or Cryptid.profile_prefix.."E"'
match_indent = true


[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "          G.GAME.stake > 1 and {"
position = "before"
payload = '''
        {
          label = G.GAME.DefineKeys and localize('b_definitions'),
          tab_definition_function = G.GAME.DefineKeys and G.UIDEF.define_keys or nil,
        },
        {
          label = G.GAME.entr_bought_decks and #G.GAME.entr_bought_decks > 0 and localize('b_decks') or nil, 
          tab_definition_function = G.GAME.entr_bought_decks and #G.GAME.entr_bought_decks > 0 and G.UIDEF.bought_decks or nil,
        },'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "self.GAME.starting_deck_size = #G.playing_cards"
position = "before"
payload = '''
if G.GAME.modifiers.ccd2 then
    for k, v in pairs(G.playing_cards) do
        local key = ""
        local ptype = pseudorandom_element({
            "Booster",
            "Voucher",
            "Tarot",
            "Joker",
            "Consumeable",
        }, pseudoseed("segfault"))
        if ptype == "Consumeable" then
            key = Cryptid.random_consumable("entr_segfault", nil, "c_entr_segfault").key
        else
            key = pseudorandom_element(G.P_CENTERS, pseudoseed("segfault"))
            local tries = 0
            while key.set ~= ptype or key.no_doe or G.GAME.banned_keys[key.key] do --i love when my key has keys
                key = pseudorandom_element(G.P_CENTERS, pseudoseed("segfault"))
                tries = tries + 1
            end
            key = key.key
        end
        v:set_ability(G.P_CENTERS[key])
    end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "G.GAME.round_resets.ante = Big and (to_number(math.floor(to_big(G.GAME.round_resets.ante)))) or math.floor(G.GAME.round_resets.ante)"
position = "at"
payload = '''

'''
match_indent = true