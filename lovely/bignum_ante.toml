[manifest]
version = "1.0.0"
dump_lua = true
priority = -1

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "{n=G.UIT.O, config={object = DynaText({string = {number_format(G.GAME.round_resets.ante)}, colours = {text_colour or G.C.FILTER},shadow = true, float = true, scale = 0.45})}},"
position = "at"
payload = '{n=G.UIT.O, config={object = DynaText({string = {G.GAME.Ruby and G.GAME.RubyAnteTextNum or number_format(G.GAME.round_resets.ante)}, colours = {text_colour or G.C.FILTER},shadow = true, float = true, scale = 0.45})}},'
match_indent = true



[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "{n=G.UIT.O, config={object = DynaText({string = {{ref_table = G.GAME.round_resets, ref_value = 'ante'}}, colours = {G.C.IMPORTANT},shadow = true, font = G.LANGUAGES['en-us'].font, scale = 2*scale}),id = 'ante_UI_count'}},"
position = "at"
payload = "{n=G.UIT.O, config={object = DynaText({string = {{ref_table = G.GAME, ref_value = 'RubyAnteTextNum'}}, colours = {G.C.IMPORTANT},shadow = true, font = G.LANGUAGES['en-us'].font, scale = 2*scale}),id = 'ante_UI_count'}},"
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "self.chips = get_blind_amount(G.GAME.round_resets.ante)*self.mult*G.GAME.starting_params.ante_scaling"
position = "at"
payload = "self.chips = (get_blind_amount(G.GAME.round_resets.ante) or 1)*(self.mult or 1)*(G.GAME.starting_params.ante_scaling or 1)"
match_indent = true


[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/game_object.lua"]'
pattern = "return (x_above and (1e-6*eval(x) + eval(x_above)) or eval(x)) > (y_above and (1e-6*eval(y) + eval(y_above)) or eval(y))"
position = "at"
payload = "return to_big(x_above and (1e-6*eval(x) + eval(x_above)) or eval(x)) > to_big(y_above and (1e-6*eval(y) + eval(y_above)) or eval(y))"
match_indent = true
